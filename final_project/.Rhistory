plot<-plot + geom_bar()
plot
}
i <- 0
i
#Variables 6-9 are religion variables, let us interpret them together
for (i in which(colnames(data)=="Roman.catholic"):which(colnames(data)=="No.religion"))
{
i=1+i
}
i
i
View (data)
i <- 0
i
for (i in which(colnames(data)=="Roman.catholic"):which(colnames(data)=="No.religion"))
{
i=1+i
}
i
i <- 0
i <- 0
i
for (i in which(colnames(data)=="Roman.catholic"):which(colnames(data)=="No.religion"))
{
i <- i + 1
}
i
i <- 0
i
for (i in which(colnames(data)=="Roman.catholic"):which(colnames(data)=="No.religion"))
{
head(data[,i])
}
vegLengths <- rbind(data$Roman.catholic, data$Protestant)
ggplot(vegLengths, aes(length, fill = colnames(vegLengths))) + geom_density(alpha = 0.2)
ggplot(vegLengths, aes(length, fill = Roman.catholic)) + geom_density(alpha = 0.2)
View(vegLengths)
carrots<- data$Roman.catholic
cukes<-data$Protestant
carrots$veg <- 'carrot'
cukes$veg <- 'cuke'
vegLengths <- rbind(carrots, cukes)
ggplot(vegLengths, aes(length, fill = veg)) + geom_density(alpha = 0.2)
ggplot(vegLengths, aes(length, fill = veg)) +
geom_histogram(alpha = 0.5, aes(y = ..density..), position = 'identity')
str(vegLengths)
str(carrots)
carrots<- data.frame(data$Roman.catholic)
str(carrots)
carrots<- data.frame(data$Roman.catholic)
cukes<-data.frame(data$Protestant)
carrots$veg <- 'carrot'
cukes$veg <- 'cuke'
vegLengths <- rbind(carrots, cukes)
plot<-ggplot(data,aes(x=Roman.catholic + No.religion, fill= policy.output))
plot<-plot + geom_bar()
plot
DF <- rbind(data.frame(fill="blue", obs=data$Roman.catholic),
data.frame(fill="green", obs=data$Protestant),
data.frame(fill="red", obs=dataset3$Other.religion),
data.frame(fill="orange", obs=dataset3$No.religion))
DF <- rbind(data.frame(fill="blue", obs=data$Roman.catholic),
data.frame(fill="green", obs=data$Protestant),
data.frame(fill="red", obs=data$Other.religion),
data.frame(fill="orange", obs=data$No.religion))
ggplot(DF, aes(x=obs, fill=fill)) +
geom_histogram(binwidth=1, colour="black", position="dodge") +
scale_fill_identity()
str(DF)
ggplot(DF, aes(x=obs, fill=fill)) +geom_bar()
ggplot(DF, aes(x=obs, fill=fill)) +geom_bar() + scale_fill_manual(breaks=1:4, values=c("blue","green","red","orange"))
DF <- rbind(data.frame(dataset="Roman catholic", obs=data$Roman.catholic),
data.frame(dataset="Protestant", obs=data$Protestant),
data.frame(dataset="Other ", obs=data$Other.religion),
data.frame(dataset="None", obs=data$No.religion))
DF$dataset <- as.factor(DF$dataset)
ggplot(DF, aes(x=obs, fill=dataset)) +geom_bar()
DF <- rbind(data.frame(dataset="Roman catholic", obs=data$Roman.catholic),
data.frame(dataset="Protestant", obs=data$Protestant),
data.frame(dataset="Other ", obs=data$Other.religion),
data.frame(dataset="None", obs=data$No.religion))
DF$dataset <- as.factor(DF$dataset)
ggplot(DF, aes(x=obs, fill=dataset)) +geom_bar() #+ scale_fill_manual(breaks=1:4, values=c("blue","green","red","orange")) +
ggtitle("histogram with distribution of Religion")
DF <- rbind(data.frame(dataset="Roman catholic", obs=data$Roman.catholic),
data.frame(dataset="Protestant", obs=data$Protestant),
data.frame(dataset="Other ", obs=data$Other.religion),
data.frame(dataset="None", obs=data$No.religion))
DF$dataset <- as.factor(DF$dataset)
ggplot(DF, aes(x=obs, fill=dataset)) +geom_bar() +
ggtitle("histogram with distribution of Religion")
#Varaibles 6-9 are all linked to religion, let us interpret them together
JUST.FOR.PLOT <- rbind(data.frame(dataset="Roman catholic", obs=data$Roman.catholic),
data.frame(dataset="Protestant", obs=data$Protestant),
data.frame(dataset="Other ", obs=data$Other.religion),
data.frame(dataset="None", obs=data$No.religion))
JUST.FOR.PLOT$dataset <- as.factor(JUST.FOR.PLOT$dataset)
ggplot(JUST.FOR.PLOT, aes(x=obs, fill=dataset)) +geom_bar() +
ggtitle("Histogram with distribution of Religion")
sum(is.na(data))
JUST.FOR.PLOT <- rbind(data.frame(dataset="Married", obs=data$Married),
data.frame(dataset="Living together", obs=data$Living.together),
data.frame(dataset="Other relation ", obs=data$Other.relation),
data.frame(dataset="Singles", obs=data$Singles))
JUST.FOR.PLOT$dataset <- as.factor(JUST.FOR.PLOT$dataset)
ggplot(JUST.FOR.PLOT, aes(x=obs, fill=dataset)) +geom_bar() +
ggtitle("Histogram with distribution of Marital status")
knitr::opts_chunk$set(echo = TRUE,
tidy = TRUE, fig.width = 7, fig.height = 4,
fig.align='left', dev = 'pdf')
if(!require("pacman")) install.packages("pacman")
if(!require("pROC")) install.packages("pROC")
pacman::p_load(dplyr, ggplot2, glmnet, car, corrplot)
library(pROC)
for (i in which(colnames(data)=="Average.income"):which(colnames(data)=="Purchasing.power.class"))
{
data[,i] <- factor(data[,i],
levels=c(0:8),
labels=c("RS 0",
"Rs 1 – 49",
"RS 50 – 99",
"Rs 100 – 199",
"RS 200 – 499",
"RS 500 – 999",
"RS 1000 – 4999",
"RS 5000 – 9999",
"RS 10000 - 19999"
))
}
str(data)
sum(is.na(data))
data <- na.omit(data.main)
sum(is.na(data))
knitr::opts_chunk$set(echo = TRUE,
tidy = TRUE, fig.width = 7, fig.height = 4,
fig.align='left', dev = 'pdf')
if(!require("pacman")) install.packages("pacman")
if(!require("pROC")) install.packages("pROC")
pacman::p_load(dplyr, ggplot2, glmnet, car, corrplot)
library(pROC)
data <- data %>% rename(policy.output = No..of.mobile.home.policies )
knitr::opts_chunk$set(echo = TRUE,
tidy = TRUE, fig.width = 7, fig.height = 4,
fig.align='left', dev = 'pdf')
if(!require("pacman")) install.packages("pacman")
if(!require("pROC")) install.packages("pROC")
pacman::p_load(dplyr, ggplot2, glmnet, car, corrplot)
library(pROC)
library(devtools)
library(devtools)
caravan_kaggle<- read.csv("caravan-insurance-challenge.csv", header = T)
caravan_kaggle<- read.csv("caravan-insurance-challenge.csv", header = T)
```{r}
caravan_kaggle$MOSTYPE <- factor(caravan_kaggle$MOSTYPE,
levels=c(1:41),
labels=c("High Income, expensive child",
"Very Important Provincials",
"High status seniors",
"Affluent senior apartments",
"Mixed seniors",
"Career and childcare",
"Dinki's (Double income no kids)",
"Middle class families",
"Modern, complete families",
"Stable family","Family starters",
"Affluent young families",
"Young all american family",
"Junior cosmopolitans",
"Senior cosmopolitans",
"Students in apartments",
"Fresh masters in the city",
"Single youth",
"Suburban youth",
"Ethnically diverse",
"Young urban have-nots",
"Mixed apartment dwellers",
"Young and rising",
"Young, low educated",
"Yound seniros in the city",
"Own home elderly",
"Seniors in apartments",
"Residential elderly",
"Porchless seniors: no front yard",
"Religious elderly singles",
"Low income catholics",
"Mixed seniors2",
"Lower class large families",
"Large family,employed child",
"Village families",
"Couples with teens 'Married with children'",
"Mixed small town dwellers",
"Traditional families",
"Large religous families",
"Large family farms",
"Mixed rurals"))
#Average Age Refactor
caravan_kaggle$MGEMLEEF <- factor(caravan_kaggle$MGEMLEEF,
levels=c(1:6),
labels=c("20-30 years",
"30-40 years",
"40-50 years",
"50-60 years",
"60-70 years",
"70-80 years"))
#Custom Main Type Refactor
caravan_kaggle$MOSHOOFD <- factor(caravan_kaggle$MOSHOOFD,
levels=(1:10),
labels=c("Successful hedonists",
"Driven Growers",
"Average Family",
"Career Loners",
"Living well",
"Cruising Seniors",
"Retired and Religious",
"Family with grown ups",
"Conservatie Families",
"Farmers"))
str(caravan_kaggle)
ggplot(caravan_kaggle,aes(x=CARAVAN)) + geom_bar() + labs(x="No. of mobile home policies ")
str(caravan_kaggle)
plot<-ggplot(caravan_kaggle,aes(x=MOSTYPE, fill= CARAVAN))
plot<-plot + geom_bar()
plot<-plot + labs(x="Customer Main Type")
plot
caravan_kaggle$CARAVAN <- factor(caravan_kaggle$CARAVAN,levels=c("0","1"))
caravan_kaggle$MGEMLEEF <- factor(caravan_kaggle$MGEMLEEF,
levels=c(1:6),
labels=c("20-30 years",
"30-40 years",
"40-50 years",
"50-60 years",
"60-70 years",
"70-80 years"))
caravan_kaggle$MOSHOOFD <- factor(caravan_kaggle$MOSHOOFD,
levels=(1:10),
labels=c("Successful hedonists",
"Driven Growers",
"Average Family",
"Career Loners",
"Living well",
"Cruising Seniors",
"Retired and Religious",
"Family with grown ups",
"Conservatie Families",
"Farmers"))
#Percentages Refactor
for (i in which(colnames(caravan_kaggle)=="MGODRK"):which(colnames(caravan_kaggle)=="MKOOPKLA")){
caravan_kaggle[,i] <- factor(caravan_kaggle[,i],
levels=c(0:9),
labels=c("0%",
"1-10%",
"11-23%",
"24-36%",
"37-49%",
"50-62%",
"63-75%",
"76-88%",
"89-99%",
"100%"))
}
for (i in which(colnames(caravan_kaggle)=="PWAPART"):which(colnames(caravan_kaggle)=="ABYSTAND")){
caravan_kaggle[,i] <- factor(caravan_kaggle[,i],
levels=c(0:9),
labels=c("0",
"1-49",
"50-99",
"100-199",
"200-499",
"500-999",
"1000-4999",
"5000-9999",
"10,000-19,999",
">=20,000"))
}
sum(is.na(caravan_kaggle)) #find missing values
caravan_kaggle<-caravan_kaggle[complete.cases(caravan_kaggle),]
caravan_kaggle<-caravan_kaggle[,-1]
str(caravan_kaggle)
ggplot(caravan_kaggle,aes(x=CARAVAN)) + geom_bar() + labs(x="No. of mobile home policies ")
ggplot(caravan_kaggle,aes(x=CARAVAN)) + geom_bar() + labs(x="No. of mobile home policies ")
plot<-ggplot(caravan_kaggle,aes(x=MOSTYPE, fill= CARAVAN))
plot<-plot + geom_bar()
plot<-plot + labs(x="Customer Main Type")
plot
str(caravan_kaggle)
summary(caravan_kaggle)
caravan_kaggle<- read.csv("caravan-insurance-challenge.csv", header = T)
summary(caravan_kaggle)
caravan_kaggle$MOSTYPE <- factor(caravan_kaggle$MOSTYPE,
levels=c(1:41),
labels=c("High Income, expensive child",
"Very Important Provincials",
"High status seniors",
"Affluent senior apartments",
"Mixed seniors",
"Career and childcare",
"Dinki's (Double income no kids)",
"Middle class families",
"Modern, complete families",
"Stable family","Family starters",
"Affluent young families",
"Young all american family",
"Junior cosmopolitans",
"Senior cosmopolitans",
"Students in apartments",
"Fresh masters in the city",
"Single youth",
"Suburban youth",
"Ethnically diverse",
"Young urban have-nots",
"Mixed apartment dwellers",
"Young and rising",
"Young, low educated",
"Yound seniros in the city",
"Own home elderly",
"Seniors in apartments",
"Residential elderly",
"Porchless seniors: no front yard",
"Religious elderly singles",
"Low income catholics",
"Mixed seniors2",
"Lower class large families",
"Large family,employed child",
"Village families",
"Couples with teens 'Married with children'",
"Mixed small town dwellers",
"Traditional families",
"Large religous families",
"Large family farms",
"Mixed rurals"))
str(caravan_kaggle)
#Average Age Refactor
caravan_kaggle$MGEMLEEF <- factor(caravan_kaggle$MGEMLEEF,
levels=c(1:6),
labels=c("20-30 years",
"30-40 years",
"40-50 years",
"50-60 years",
"60-70 years",
"70-80 years"))
#Custom Main Type Refactor
caravan_kaggle$MOSHOOFD <- factor(caravan_kaggle$MOSHOOFD,
levels=(1:10),
labels=c("Successful hedonists",
"Driven Growers",
"Average Family",
"Career Loners",
"Living well",
"Cruising Seniors",
"Retired and Religious",
"Family with grown ups",
"Conservatie Families",
"Farmers"))
#Percentages Refactor
for (i in which(colnames(caravan_kaggle)=="MGODRK"):which(colnames(caravan_kaggle)=="MKOOPKLA")){
caravan_kaggle[,i] <- factor(caravan_kaggle[,i],
levels=c(0:9),
labels=c("0%",
"1-10%",
"11-23%",
"24-36%",
"37-49%",
"50-62%",
"63-75%",
"76-88%",
"89-99%",
"100%"))
}
#Number of Refactor
for (i in which(colnames(caravan_kaggle)=="PWAPART"):which(colnames(caravan_kaggle)=="ABYSTAND")){
caravan_kaggle[,i] <- factor(caravan_kaggle[,i],
levels=c(0:9),
labels=c("0",
"1-49",
"50-99",
"100-199",
"200-499",
"500-999",
"1000-4999",
"5000-9999",
"10,000-19,999",
">=20,000"))
}
#Set class label as factor
caravan_kaggle$CARAVAN <- factor(caravan_kaggle$CARAVAN,levels=c("0","1"))
#Remove empty rows
sum(is.na(caravan_kaggle)) #find missing values
caravan_kaggle<-caravan_kaggle[complete.cases(caravan_kaggle),]
#Remove empty rows
sum(is.na(caravan_kaggle)) #find missing values
caravan_kaggle<-caravan_kaggle[complete.cases(caravan_kaggle),]
#Remove ORIGIN
caravan_kaggle<-caravan_kaggle[,-1]
str(caravan_kaggle)
ggplot(caravan_kaggle,aes(x=CARAVAN)) + geom_bar() + labs(x="No. of mobile home policies ")
plot<-ggplot(caravan_kaggle,aes(x=MOSTYPE, fill= CARAVAN))
plot<-plot + geom_bar()
plot<-plot + labs(x="Customer Main Type")
plot
plot<-ggplot(caravan_kaggle,aes(x=MOSHOOFD, fill= CARAVAN))
plot<-plot + geom_bar()
plot
plot<-ggplot(caravan_kaggle,aes(x=MGEMLEEF, fill= CARAVAN))
plot<-plot + geom_bar()
plot
plot<-ggplot(data,aes(x=Average.income, fill= policy.output))
plot<-plot + geom_bar()
plot
plot<-ggplot(caravan_kaggle,aes(x=MINKGEM, fill= CARAVAN))
plot<-plot + geom_bar()
plot
#Varaibles 6-9 are all linked to religion, let us interpret them together
JUST.FOR.PLOT <- rbind(data.frame(dataset="Roman catholic", obs=caravan_kaggle$MGODRK),
data.frame(dataset="Protestant", obs=caravan_kaggle$MGODPR),
data.frame(dataset="Other ", obs=caravan_kaggle$MGODOV),
data.frame(dataset="None", obs=caravan_kaggle$MGODGE))
JUST.FOR.PLOT$dataset <- as.factor(JUST.FOR.PLOT$dataset)
ggplot(JUST.FOR.PLOT, aes(x=obs, fill=dataset)) +geom_bar() +
ggtitle("Histogram with distribution of Religion")
#We can see there is significant variation between each type of religion, and therefore these varaibles should be left as is
#Variables 10-13 are all linked to Marital status, let us interpret them together
JUST.FOR.PLOT <- rbind(data.frame(dataset="Married", obs=caravan_kaggle$MRELGE),
data.frame(dataset="Living together", obs=caravan_kaggle$MRELSA),
data.frame(dataset="Other relation ", obs=caravan_kaggle$MRELOV),
data.frame(dataset="Singles", obs=caravan_kaggle$MFALLEEN))
JUST.FOR.PLOT$dataset <- as.factor(JUST.FOR.PLOT$dataset)
ggplot(JUST.FOR.PLOT, aes(x=obs, fill=dataset)) +geom_bar() +
ggtitle("Histogram with distribution of Marital status")
#We can see there is significant variation between each type of marital status, and therefore these varaibles should be left as is
if(!require("devtools")) install.packages("devtools")
if(!require("ranger")) install.packages("ranger")
if(!require("randomForest")) install.packages("randonForest")
if(!require("randomForest")) install.packages("randomForest")
if(!require("tree")) install.packages("tree")
if(!require("leaps")) install.packages("leaps")
if(!require("leaps")) install.packages("leaps")
library(regsubsets)
knitr::opts_chunk$set(echo = TRUE, results = "hide")
knitr::opts_chunk$set(fig.height=7, fig.width=10, warning = F)
#options(scipen = 1, digits = 4)
if(!require('pacman')) {
install.packages('pacman')
}
pacman::p_load(ISLR, leaps, car, tidyverse, GGally, reshape2)
fit.forward <- regsubsets(LogSalary ~., data2, nvmax=25, method="forward")
knitr::opts_chunk$set(echo = TRUE,
tidy = TRUE, fig.width = 7, fig.height = 4,
fig.align='left', dev = 'pdf')
if(!require("pacman")) install.packages("pacman")
if(!require("pROC")) install.packages("pROC")
if(!require("devtools")) install.packages("devtools")
if(!require("ranger")) install.packages("ranger")
if(!require("randomForest")) install.packages("randomForest")
if(!require("tree")) install.packages("tree")
if(!require("leaps")) install.packages("leaps")
pacman::p_load(dplyr, ggplot2, glmnet, car, corrplot)
library(pROC)
library(devtools)
library(rpart)
library(ranger)
library(randomForest)
library(tree)
fit.backward <- regsubsets(CARAVAN ~., ctrain, nvmax=8, method="backward")
#Building model on training data using randomForest package
rf.train <- randomForest(CARAVAN~., ctrain)
# LASSO technique and elastic net
# First, we prepare the design matrix and response
X <- model.matrix(CARAVAN~., ctrain)[,-1]
#Splitting into training and testing data
set.seed(123)
n <- nrow(caravan_kaggle)
n1 <- (2/3)*n
train_index <- sample(n, n1, replace=FALSE)
length(train_index)
ctrain <- caravan_kaggle[train_index, ]
ctest <- caravan_kaggle[-train_index, ]
dim(ctrain)
dim(ctest)
predict.rf.yvar <- predict(rf.train, newdata=ctest)
#Building model on training data using randomForest package
rf.train <- randomForest(CARAVAN~., ctrain)
plot(rf.train) #plotting the error vs number of trees to find optimal forest size
predict.rf.yvar <- predict(rf.train, newdata=ctest)
predict.rf.prob <- predict(rf.train, newdata=ctest, type="prob")  #predicting probabilities for ROC curve
#Testing errors
mean(ctest$CARAVAN != predict.rf.yvar)
roc(ctest$CARAVAN, predict.rf.prob[,2], plot=TRUE)
#Using ranger package since randomForest uses "majority vote" to grow the trees instead of offering customizability on Loss Function
#Running on overall data to find out OOB Error
library(ranger)
rf.ranger <- ranger(CARAVAN~., caravan_kaggle, mtry = 9,
num.trees = 500, splitrule = "gini", importance = "impurity")
rf.ranger$prediction.error ##OOB Error
```{r}
#Building model on training data using randomForest package
rf.train <- randomForest(CARAVAN~., ctrain)
```{r}
#Building model on training data using randomForest package
rf.train <- randomForest(CARAVAN~., ctrain)
plot(rf.train) #plotting the error vs number of trees to find optimal forest size
predict.rf.yvar <- predict(rf.train, newdata=ctest)
predict.rf.prob <- predict(rf.train, newdata=ctest, type="prob")  #predicting probabilities for ROC curve
#Testing errors
mean(ctest$CARAVAN != predict.rf.yvar)
roc(ctest$CARAVAN, predict.rf.prob[,2], plot=TRUE)
```
```{r}
#Building model on training data using randomForest package
rf.train <- randomForest(CARAVAN~., ctrain)
#Building model on training data using randomForest package
rf.train <- randomForest(CARAVAN~., ctrain)
